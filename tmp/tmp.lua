local max,min,abs = math.max, math.min, math.abs
local Xx,Xy,Xz,Yx,Yy,Yz,Zx,Zy,Zz,Tx,Ty,Tz = 1.,0.,0.,0.,1.,0.,0.,0.,1.,0.,0.,0.
local sqrt,flr,cos,sin,rnd=math.sqrt,math.floor,
math.cos,math.sin,math.random
 function MAT3_MUL(d,m,b)
   d[1]=m[1]*b[1] + m[4]*b[2] + m[7]*b[3]
   d[2]=m[2]*b[1] + m[5]*b[2] + m[8]*b[3]
   d[3]=m[3]*b[1] + m[6]*b[2] + m[9]*b[3]
   d[4]=m[1]*b[4] + m[4]*b[5] + m[7]*b[6]
   d[5]=m[2]*b[4] + m[5]*b[5] + m[8]*b[6]
   d[6]=m[3]*b[4] + m[6]*b[5] + m[9]*b[6]
   d[7]=m[1]*b[7] + m[4]*b[8] + m[7]*b[9]
   d[8]=m[2]*b[7] + m[5]*b[8] + m[8]*b[9]
   d[9]=m[3]*b[7] + m[6]*b[8] + m[9]*b[9]
end
function trans(d,v)
   d[1]= Xx*v[1] + Yx*v[2] + Zx*v[3] + Tx
   d[2]= Xy*v[1] + Yy*v[2] + Zy*v[3] + Ty
   d[3]= Xz*v[1] + Yz*v[2] + Zz*v[3] + Tz
end
function vsub( d,i, a,j, b,k )
   for q=0,2 do d[i+q] = a[j+q]-b[k+q] end
end
function vadd( d,i, a,j, b,k )
   for q = 0, 2 do
   d[i+q] = a[j+q]+b[k+q]
   end
end
function vcross(d,i,a,j,b,k)
   for q=0,2 do d[i+q]=a[j+(q+1)%3]*b[k+(q+2)%3]-a[j+(q+2)%3]*b[k+(q+1)%3]end
end
function vmulf(d,i,f)
   for q=0,2 do d[i+q]=d[i+q]*f end
 end
function vdot(a,i,b,j) return a[i]*b[j] + a[i+1]*b[j+1] + a[i+2]*b[j+2] end
function vlen(a,i) return sqrt(vdot(a,i,a,i)) end
function vnorm(a,i) vmulf( a, i, 1./vlen(a,i) ) end
function ncpy(d,i,a,j,n) for q=0,n-1 do d[i+q]=a[j+q] end end
function MAT3_FPS(cm, p,y )
   local ps,pc,ys,yc = sin(p),cos(p),sin(y),cos(y)
   local XM={ 1.,0,0, 0, pc, ps, 0, -ps, pc };
   local ZM={ yc, ys,0, -ys, yc,0, 0,0,1. };
   MAT3_MUL(cm,ZM,XM);
end
function deepcopy(orig) -- credits: MonstersGoBoom
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end
local frame, last_time, fps, last_frame = 0, 0.,0.,0.
local tick, tick_last = 0,0.
local ZOOM,NEAR,FAR,CULL,FOG=2.0,-.1,100.,1.,0.
local ID = {1.,0.,0., 0.,1.,0., 0.,0.,1., 0.,0.,0.}
local CM={1.,0.,0., 0.,0.,1., 0.,-1.,0., 0.,-1024.,256.}
local CP,CV,CA,CW,C_mode={ 1000, -100,1000},{0,0,0},{3.1415926535897932384626433832795/2,0,0},{0,0,0},1
local PP,PV,PVL,PD,PU={800,800,150},{0,0,10},{0,0,0},{0,1,0},{0,0,1}
local stepcounter, STEPBOUNCE = 0,0
local tex={}
NOPY16 = " 0 2 01e2f2ffefffcff 0 08a876763a23252a7b4c26939d1c89bf5eec57bd233afff6a74c6c7baffe0e29960f3c972"
tex_data = "bababbbbbbbbabbaaaaaaaabbabbabbabbbb555bbbbbaabbaaabaabaaabbbbbbabaaabaabbbaaaaa5aabbaaaaabba555bb55555bbabaaaaaa5aaaaaaaaabbbaaaa55aaaabbbbbaaaaaaa5baba5aaaa5bbaaa555abbaabbbba5aa5aabaaabbaaaaaaaaaab5bba5aaa555aaaaaaaaa5aabbbaaa55bbbababaaaaaaa5555aab5aaaaaabbabb555555a5555aabb555abaabbbbba5aaabbbbabbbabaaaaaa55aa555aabaabaa55555aaaa55aaaaaa5aaabbbbbbba55aaaababbaabbbaa55a5555a5aabbabaaaaa55aaaaa55abba5aaabaabbbaaabbba55abaabaaaabaa5a55555aaabbabaaaaaaa5aaaaa5aab5a5aaaabbba5a5abbaaaaabaaaa5abbbbaa555aa5aaaaaaa55a5aaaaaaa5abbbaaaa5aaabaa55555baabbaaaaaaabbb5b555a5555aaa5aa555a55aaaa55abaaaaa555abbb5a555aaababbababbaaaaabb555555aa5aa55aaaaaa5aaba55abaaa5a555abbbaaaa5bbbbbbbbbaabaaaa555abaaaaaaaaa5555a5a5a55a555a5555aa55555baba5a5abaababbbabbbaab5aaaa5aa5aa5aa555aa555555a555b5aaaaaabaaabbaaaaaaaaaa5aaaabaaa5aaab5aaaaaaaa555555aaa55bba5ababba5aabbbbbbbaaabbbaa5a5aaaaaaaa55aaa5aaaaaaab5b5a55aa5bbbbbaabbabbaaabbbbbbbababbaaaa555aababaaa5aaa5aaa5aaaaabab5b555bbbba5aabaaaaaabbaabbbababbba55aa5abaabaaaaaaaaa55ababbbbbbbb555bbbbbaabbaaabaabaaabbbbbbbabaaa5aabaaabbaaaaaaaabbbbbabbabb55555bbabaa555aaaaaaaaaaabbbaaabaabbaabaaaaaaa5aabbaaaabbba555baaa555abbaabbbbaaaa5aabaaabbaaaaabbbbaabbbbbaaaaaaa5babaaaaaa5bbbaaa55bb55babbaaaba55555aab5aaaaabaabbb5bba5aaa555aaaaaaaaaaaabbbba5aaabbbbabba5abaaa55a5aa555aaaabbabb555555a5555aabb5aaabaabbabba55aaaababba5aabaa5555555a5aaabaabaa55555aaaa55aaaaaaaaaa5bbbaabbbba55abaab5aaaba55555555aaabbbabaaaaa55aaaaa55abba55aaba5bbbbbbbbaaaaabaaaa5abbbbaa55a555aaababaaaaaaa5aaaaa5aab5a5aaaa55abbabbabaabbaaaaaaabbb5b555a55a5a5aaaaa55a5aaaaaaa5abbbaaaa5aaaaa5bbbaaaaaabababbaaaaabb555555aa5aa5aa555a55aaaa55abaaaaa555abbabbbabaa555abbbaabaaaa555abaaaaaaaaa55aaaaaa5aaba55abaaa5a555abbbb5b5aaaa5aabbbabbbaab5aaaa5aaaaa5aa5555a5a5a55a555a5555aa55555babbbaaaabaaabbaabaaa5aaab5aaaa5aaa55555aa555555a555b5aaaaaabaaabbbbbbbbaabbaabaaaaaa55aaa5aaaa5aab5b5555aaa55bba5ababba5aabbbbbbbbbbbbbaabbaaaabbbaaa5aaa5aaa5aaaaab5a55aa5bbbbbaabbabbaaabbbbbbbabbbbbbbbbbbbabbbaaaaaaaaa55ababbbbab5b555bbbba5aabaaaaaabbaabbbaba0aaa5555a555aa5a55b555b5bbaaaa555555a55a5aa55a055aaaaabbaaa5aabb0babb055a5bbaa5a5bb555550b0aab5b5555a5555555ab005a505b5555a5a55b000b505aa5abaa0ab5555505000ba05b0a50555a5b500b005b505b5005b5b5a00000b0500b0bba00b05000000000b00b0a50b0ba0ab000005000055005b0bab000000000000b0b0000b000000000b0000500b00000000000000000500050050000000000000000000000000000000000000000000000000000000000000000000200202222020000002000000000111111f8884f8294f89294f89294fc66ccc6ccc6666666666666666668888994884884448148484488889984800c6cccccc6cccccccccc66cc66cccc64899884444488899898448888488894400ccccccccccdcccccccccccdcccccc68888988899889999849884189884899800cccdcccdcddcdcdcdcdcdcdccdcccc0000111000000000001111114441000000ccdddcddcddcdcdddcdcdcdccdcccc1411444144114441114444448848844000cccddcdddddddddddcdcdcddcdcdcc4888444444484448848488444448848000cddddddddddddddddcdddcddddcddc4899848988448888488889899899944000cdddddddddddddddddddddddddcddc0111111144889998884411111111100000ccdcddddddddddddddddddddddddcc4888441111111000001144888889888400ccdcdddddddddddddddddddddddddc4888888848844884488888844888894800cdddddddcddddddddddddddcddcddc4489988444988888444884488844499400cdddddddcdddddddddddddddddcddc4888884488899884448899884488444400cddddcdddddcdddcdddddddcdddddc1111000000000000000000000111000000ccdcdcdddddcdddcdcdccddccdddcc4444488448899884488998884488888400cddcdcddcddcdddcdcdccddccdcddc84994448884488448888894448899844006cdcc6ddcdcccdccdcdccdc6cdcccc88498448448888884884488488888884006cccccccccc6ccc6cccc6cc66cccc6818881000000000000000001114488840088844111111111111111111111111100000001111141441444444444441100009998888411111111111111111111114848998488448484844884884998888800222988881111111111111114929841444988848899448999884444488998480099999888411111111111111492984148998488984488949998899888988888008888989881111111111111149298411144414441111111411111144111144000eeee7177e77e7777771111144114841181177e7777e717ee77717ee7717ee1ee777f717efe77e7eee71111111114448841777ef1eff17ef1e1117ffe71e7e1feeefee7efe7117f7fe71114444448414111170001000700070007000f71e77111111111111111111fe70111111144841011770007000e0001000e000fe1eee11717177777771e771f7701111144448841117e0007000700070007000fe1e7f17e7e1ffe7eee1ff71fee00011141444884447f17e777effe7ffe77711e7177f17fee7fee7ffe7ff71f771111110448848881ef000e0007000700070007711171efff7fef7eef7ffe17711114410488844441ef000e000f0007000e000111eee1effe1fef7fef7efe111011144444444414417e000700070007000f000771eef17fff7fef7eff7ffe17711110141144800111171777efe7ffff777fe71ee111f17eef7eef7eff7ef71ee711001114448011117e000e000e0007000f000e717ef17eef7eff7fff7ef71fe71111444448114441ff000f000f000f0007000e71eee17eff7efe7efe1ef71fe711111114444441417e000700070007000f000711eef1efff7fef7eee7fe717111114444114444411ff1e7eeffefffffeef171771eef1efef7ffe7fef7ff717e700014448444844117e0007000f0007000f000fe1e7f17fef7eff7fef7ff71fe710144881448888417f000f000e000e000f000fe17ff17eff7eff1fffeefe1fe71111444488414441ef000700070007000f0007717ff17efe7fee1eef1efe1ee10011014444488841ff17eefff77ff7e77ee71f71eef17eee7fe7177e1ff71ee70111001114444881ff000100070007000e000f71eef177e71777171717771fe71144011444848481ef00070007000e0007000fe17ff111111111111111111ff71114044414841411ee00010001000100010007717ff7fe77fff7efffff7e7ff10011111444488841ee7ff77ffe7efe7fff7f77717ef77eefe7fffe717ee77ef70111144448884441717ee7ee771ee7177e7e7711777777777770777177777eee11111114448844110000000000000000000000007eeeee77eeeeee777777eee77777eee7777770000000000000000000000000007eeee7eee7eeeeeeeeeeeeeeeeeeeeeeeeee70000000000000000000000000007e700000007000000070000000700000007e700000009bdf0000000000000000eee17fff71f177ff71f177f771f177f771fe700000008ace0000000000000000eeef000000f00000007000000070000000ffe0000123456789abcdef000000007ef17f7f71f17ff7f1f177ff71f177ff71fe77000123456789abcdef00000000eef0000000f0000000f0000000f0000000ffe000"
for i=0,64*256 -1 do tex[i]=tonumber(string.sub(tex_data, i+1,i+1 ),16)end
for i=0,(64*256)-2,2 do poke( 0x8000 + (i>>1), tex[i] | tex[i+1]<<4)end
for i=0,15 do
   for j=0,2 do
   c = tonumber( string.sub( NOPY16,i*6+1+j*2, i*6+1+1+j*2 ),16 )
   poke(0x03FC0 +i*3 + j, c )
   end
end
sync()
local flat = function(iy,x0,x1,color)
 local i,e = max(0,flr( x0+.5 )), min( 240, flr( x1-.5 ) )
 for ix=i,e,2 do pix(ix,iy,color ) end
end
local span=function(iy, x0,u0,v0,l0, x1,u1,v1,l1 )
   local i = max(0,flr( x0+.5 ))
   local e = min(flr( x1-.5 ),240)
   if e < i then return end
   local es = i+.5-x0 -- distance from edge0 to PIX0 center
   local rd = (1<<15)/(x1-x0)
   local ua = (u1-u0)*rd local us = flr( u0*(1<<15) + ua*es ) ua = flr( ua ) local va = (v1-v0)*rd local vs = flr( v0*(1<<15) + va*es ) va = flr( va ) local la = (l1-l0)*rd local ls = flr( l0*(1<<15) + la*es ) la = flr( la )
   for ix=i,e do
   local lum = ls >> 15
   if lum > 128 then
   local col = tex[ ((vs>>15&255)<<6)+(us>>15&63) ]
   if col > 7 then -- bright or mid
   pix(ix,iy, col >> (lum > 192 and 0 or 1) )
   elseif col > 0 then -- dither mid - 1
   pix(ix,iy, ((lum>192) and col or 1) )
   end
   else --if lum > 64 then--if lum <= 256 then
   pix(ix,iy,lum>64 and 1 or 0 )
   end
   us,vs,ls=us+ua,vs+va,ls+la
   end
end
function raz( a, b, c, pA )
   if a[2]>b[2] then local tmp=a a=b b=tmp pA=-pA end
   if a[2]>c[2] then local tmp=a a=c c=tmp pA=-pA end
   if b[2]>c[2] then local tmp=b b=c c=tmp pA=-pA end
   local iy_b = max( 0, flr( a[2] + .5 ) )
   local iy_e = min( 136 -1, flr( c[2] + .5 ) )
   if iy_b >= iy_e then
   return
   end
   local iy_m = max( 0, min( 136 -1, flr( b[2] + .5 ) ) )
   local ta = 1./(c[2]-a[2]) -- also r_ac
   local sy = iy_b + .5 -- first pixel center (not a[2]!)
   local ts = (sy - a[2])*ta
   local ac_xa,ac_xs = (c[1]-a[1])*ta, a[1]+(c[1]-a[1])*ts
   local ac_ua,ac_us = (c[4]-a[4])*ta, a[4]+(c[4]-a[4])*ts
   local ac_va,ac_vs = (c[5]-a[5])*ta, a[5]+(c[5]-a[5])*ts
   local ac_la,ac_ls = (c[6]-a[6])*ta, a[6]+(c[6]-a[6])*ts
   ta = 1./(b[2]-a[2]) -- also r_ac
   ts = (sy - a[2])*ta
   local ab_xa,ab_xs = (b[1]-a[1])*ta, a[1]+(b[1]-a[1])*ts
   local ab_ua,ab_us = (b[4]-a[4])*ta, a[4]+(b[4]-a[4])*ts
   local ab_va,ab_vs = (b[5]-a[5])*ta, a[5]+(b[5]-a[5])*ts
   local ab_la,ab_ls = (b[6]-a[6])*ta, a[6]+(b[6]-a[6])*ts
   ta = 1./(c[2]-b[2]) -- als r_bc
   ts = (iy_m+.5-b[2])*ta
   local bc_xa, bc_xs = (c[1]-b[1])*ta, b[1]+(c[1]-b[1])*ts
   local bc_ua, bc_us = (c[4]-b[4])*ta, b[4]+(c[4]-b[4])*ts
   local bc_va, bc_vs = (c[5]-b[5])*ta, b[5]+(c[5]-b[5])*ts
   local bc_la, bc_ls = (c[6]-b[6])*ta, b[6]+(c[6]-b[6])*ts
   if pA > 0 then --001 then --c left
   for iy=iy_b,iy_e-1 do
   if iy < iy_m then -- A->B
   span( iy, ac_xs,ac_us,ac_vs,ac_ls,
      ab_xs,ab_us,ab_vs,ab_ls )
   ab_xs,ab_us,ab_vs,ab_ls=
      ab_xs+ab_xa,ab_us+ab_ua,ab_vs+ab_va,ab_ls+ab_la
   else -- B->C
   span( iy,
      ac_xs,ac_us,ac_vs,ac_ls,
      bc_xs,bc_us,bc_vs,bc_ls
   )
   bc_xs = bc_xs + bc_xa
   bc_us = bc_us + bc_ua
   bc_vs = bc_vs + bc_va
   bc_ls = bc_ls + bc_la
   end
   ac_xs = ac_xs + ac_xa
   ac_us = ac_us + ac_ua
   ac_vs = ac_vs + ac_va
   ac_ls = ac_ls + ac_la
   end
   else --if pA < -.001 then --c right
   for iy=iy_b,iy_e-1 do
   if iy < iy_m then
   span( iy,ab_xs,ab_us,ab_vs,ab_ls,
      ac_xs,ac_us,ac_vs,ac_ls)
   ab_xs,ab_us,ab_vs,ab_ls=
      ab_xs+ab_xa,ab_us+ab_ua,ab_vs+ab_va,ab_ls+ab_la
   else
   span( iy,bc_xs,bc_us,bc_vs,bc_ls,
      ac_xs,ac_us,ac_vs,ac_ls)
   bc_xs,bc_us,bc_vs,bc_ls =
      bc_xs+bc_xa,bc_us+bc_ua,bc_vs+bc_va,bc_ls+bc_la
   end
   ac_xs,ac_us,ac_vs,ac_ls =
   ac_xs+ac_xa,ac_us+ac_ua,ac_vs+ac_va,ac_ls+ac_la
   end
   end
end
function raz_flat( a, b, c, pA, color )
    if a[2]>b[2] then local tmp=a a=b b=tmp pA=-pA end
 if a[2]>c[2] then local tmp=a a=c c=tmp pA=-pA end
 if b[2]>c[2] then local tmp=b b=c c=tmp pA=-pA end
 local iy_b = max( 0, flr( a[2] + .5 ) )
 local iy_m = max( 0, min( 136 -1, flr( b[2] + .5 ) ) )
 local iy_e = min( 136 -1, flr( c[2] + .5 ) )
 local sy = iy_b + .5 -- first PIXel center (not a[2]!)
 if iy_b >= iy_e then return end
    local ac_ta = 1./(c[2]-a[2]) -- also r_ac
    local ac_ts = (sy - a[2])*ac_ta
 local ac_xa = (c[1]-a[1])*ac_ta
 local ac_xs = a[1]+(c[1]-a[1])*ac_ts
    local ab_ta = 1./(b[2]-a[2]) -- also r_ac
    local ab_ts = (sy - a[2])*ab_ta
 local ab_xa = (b[1]-a[1])*ab_ta
 local ab_xs = a[1]+(b[1]-a[1])*ab_ts
   local bc_ta = 1./(c[2]-b[2]) -- als r_bc
 local bc_ts = (iy_m+.5-b[2])*bc_ta
 local bc_xa = (c[1]-b[1])*bc_ta
 local bc_xs = b[1]+(c[1]-b[1])*bc_ts
 if pA > 0 then --001 then --c left
    for iy=iy_b,iy_e-1 do
    local x0 = ac_xs ac_xs = ac_xs + ac_xa
    if iy < iy_m then -- A->B
    local x1 = ab_xs
    ab_xs = ab_xs + ab_xa
    local i = max(0,flr(x0+.5 )) local e = max( 0, min( 240, flr( x1-.5 ) ) ) for _ix=i,e do pix(_ix,iy,color ) end
    else -- B->C
    local x1 = bc_xs
    bc_xs = bc_xs + bc_xa
    local i = max(0,flr(x0+.5 )) local e = max( 0, min( 240, flr( x1-.5 ) ) ) for _ix=i,e do pix(_ix,iy,color ) end
    end
    end
 else --if pA < -.001 then --c right
    for iy=iy_b,iy_e-1 do
    local x1 = ac_xs
    ac_xs = ac_xs + ac_xa
    if iy < iy_m then
    local x0 = ab_xs
    ab_xs = ab_xs + ab_xa
    local i = max(0,flr(x0+.5 )) local e = max( 0, min( 240, flr( x1-.5 ) ) ) for _ix=i,e do pix(_ix,iy,color ) end
    else
    local x0 = bc_xs
    bc_xs = bc_xs + bc_xa
    local i = max(0,flr(x0+.5 )) local e = max( 0, min( 240, flr( x1-.5 ) ) ) for _ix=i,e do pix(_ix,iy,color ) end
    end
    end
 end
end
local light,light_count = {},3
light[0] = { 0,0,0}
light[1] = { 0,400, 400}
light[2] = { 1000,1000, 400}
local L0_x,L0_y,L0_z,L0_r = 0,0,300, 256*512
local L1_x,L1_y,L1_z,L1_r = 0,400,300, 1024*1024
local L2_x,L2_y,L2_z,L2_r = 1000,1000,300,1024
function proc_lights()
   local v = light[0]
   L0_x = Xx*v[1] + Yx*v[2] + Zx*v[3] + Tx
   L0_y = Xy*v[1] + Yy*v[2] + Zy*v[3] + Ty
   L0_z = Xz*v[1] + Yz*v[2] + Zz*v[3] + Tz
   v = light[1]
   L1_x = Xx*v[1] + Yx*v[2] + Zx*v[3] + Tx
   L1_y = Xy*v[1] + Yy*v[2] + Zy*v[3] + Ty
   L1_z = Xz*v[1] + Yz*v[2] + Zz*v[3] + Tz
   v = light[2]
   L2_x = Xx*v[1] + Yx*v[2] + Zx*v[3] + Tx
   L2_y = Xy*v[1] + Yy*v[2] + Zy*v[3] + Ty
   L2_z = Xz*v[1] + Yz*v[2] + Zz*v[3] + Tz
end
TV={}
for i=0,512-1 do
   TV[i] = {0.,0.,0.,0.,0.,0.}-- x,y,z,u,v,L
end
function tv_indices(Iv_,polycount) --indices --per poly
   local tv,iv = TV,Iv_
   local i=1
   for pli=1, polycount do --while num do
   local num = iv[i]
   local count = num & 15
   local flat_color = num >> 4 --0 = texture
   local A= tv[ iv[ i + 1 ] ]
   local B= tv[ iv[ i + 2 ] ]
   local C= tv[ iv[ i + 3 ] ]
   local pA = (B[1]-A[1])*(C[2]-A[2])-(B[2]-A[2])*(C[1]-A[1])
   if pA*CULL < -.001 and A[3] > 0 then
   for n=0,count-3 do
   B=tv[ iv[ (i+1) + n+1 ] ]
   C=tv[ iv[ (i+1) + n+2 ] ]
   if B[3] > 0 and C[3] > 0 then
      raz( A, B, C, pA )
   end
   end
   end
   i = i + count + 1
   end
end
function tv_indices_unlit(Iv_,polycount,col) --indices --per poly
   local tv,iv,i = TV,Iv_,1
   for pli=1, polycount do --while num do
   local count = iv[i] & 15
   local A,B,C= tv[ iv[ i + 1 ] ],tv[ iv[ i + 2 ] ],tv[ iv[ i + 3 ] ]
   local pA = (B[1]-A[1])*(C[2]-A[2])-(B[2]-A[2])*(C[1]-A[1])
   if pA*CULL < -.001 and A[3]>0 then
   for n=0,count-3 do
   B=tv[ iv[ (i+1) + n+1 ] ]
   C=tv[ iv[ (i+1) + n+2 ] ]
   if B[3] > 0 and C[3] > 0 then
      raz_flat( A,B,C,pA,col )
   end
   end
   end
   i = i + count + 1
   end
end
function mesh_draw( vv, vcount, Iv_, Polycount_, MM )
   local tv = TV
   for i=1, vcount do
   local v = vv[i]
   local d = tv[i-1]
   local z = Xz*v[1] + Yz*v[2] + Zz*v[3] + Tz
   if z < 100 then
   local x = Xx*v[1] + Yx*v[2] + Zx*v[3] + Tx
   local y = Xy*v[1] + Yy*v[2] + Zy*v[3] + Ty
   local dx,dy,dz = x-L0_x,y-L0_y,z-L0_z
   local s2 = dx*dx + dy*dy + dz*dz ;
   local nx = (Xx*v[4] + Yx*v[5] + Zx*v[6])
   local ny = (Xy*v[4] + Yy*v[5] + Zy*v[6])
   local nz = (Xz*v[4] + Yz*v[5] + Zz*v[6])
   local lum = max(0,-(dx*nx+dy*ny+dz*nz))*(1./s2)*1024
   d[6] = max(0,min(255, lum) )
   z = max( .1, -z ) -- senpai, pushet forth
   local fov = (136*ZOOM)/z
   d[1]=x*fov + 120
   d[2]=y*-fov + 68
   d[3] = z--RMEOVE UNUSED
   d[4]=(v[7]*64)*(1/256.)
   d[5]=(v[8]*256)*(1/128.)
   else
   d[3] = -1000
   end
   end
   tv_indices(Iv_,Polycount_)
end
function mesh_draw_unlit( vv, vcount, iv, polycount, color )
   local tv = TV
 for i=1, vcount do
    local v = vv[i]
    local d = tv[i-1]
    local z = Xz*v[1] + Yz*v[2] + Zz*v[3] + Tz
    if z < -.1 then
    local x = Xx*v[1] + Yx*v[2] + Zx*v[3] + Tx
    local y = Xy*v[1] + Yy*v[2] + Zy*v[3] + Ty
    local fov = (136*ZOOM) / (-z)
    d[1]=x*fov + 120
    d[2]=y*-fov + 68
    d[3]=-z
    else
    d[3] = 0.
    end
 end
 tv_indices_unlit( iv, polycount,color )
end
function line3(ax,ay,az,bx,by,bz,col)
   local z0 = Xz*ax + Yz*ay + Zz*az + Tz
   local z1 = Xz*bx + Yz*by + Zz*bz + Tz
   if z0 < -.001 and z1 < -.001 then
   local x0 = Xx*ax + Yx*ay + Zx*az + Tx
   local y0 = Xy*ax + Yy*ay + Zy*az + Ty
   local x1 = Xx*bx + Yx*by + Zx*bz + Tx
   local y1 = Xy*bx + Yy*by + Zy*bz + Ty
   local fov0 = (136*ZOOM)/z0
   local fov1 = (136*ZOOM)/z1
   x0 = x0*-fov0 + 120
   y0 = y0*fov0 + 68
   x1 = x1*-fov1 + 120
   y1 = y1*fov1 + 68
   line(x0,y0,x1,y1,col)
   end
end
function point3(ax,ay,az,col)
   local z0 = Xz*ax + Yz*ay + Zz*az + Tz
   if z0 < -.001 then
   local x0 = Xx*ax + Yx*ay + Zx*az + Tx
   local y0 = Xy*ax + Yy*ay + Zy*az + Ty
   local fov0 = (136*ZOOM)/z0
   x0 = x0*-fov0 + 120
   y0 = y0*fov0 + 68
   rect(x0-1,y0-1,2,2,col)
   end
end
char0_min = {-48,-41,0}
char0_max = {48,43,177}
char0_polycount = 63
char0_vcount = 93
char0_icount = 284
char0_verts = {
{0,-11,135, 0,-84,95, 228,172},
{-19,-17,123, -59,-98,55, 228,172},
{0,-20,121, 0,-122,34, 228,172},
{-30,-4,125, -103,13,72, 228,172},
{-10,-1,135, -60,19,110, 228,172},
{0,-24,71, 0,-126,16, 228,172},
{-29,-15,71, -76,-100,17, 228,172},
{-35,-26,1, -78,-97,23, 228,172},
{0,-41,1, 0,-124,27, 228,172},
{-29,16,71, -21,125,3, 168,156},
{0,20,71, 0,127,4, 168,147},
{0,22,1, 0,127,2, 252,147},
{-32,15,1, -23,125,2, 252,156},
{-39,-1,71, -126,2,19, 228,172},
{-48,-3,1, -126,3,15, 228,172},
{-29,16,71, -96,81,20, 228,172},
{-32,15,1, -102,76,7, 228,172},
{0,18,107, 0,127,6, 120,147},
{-7,2,138, -52,33,111, 252,166},
{-23,-6,134, -49,18,116, 252,157},
{0,-18,135, 0,-33,123, 184,157},
{0,-8,140, 0,-33,123, 200,166},
{-7,2,138, -122,-5,-35, 172,166},
{0,-8,140, -102,-74,-13, 212,166},
{-8,2,145, -125,-19,-13, 172,170},
{0,9,136, 0,106,71, 200,166},
{0,18,107, 0,121,39, 140,157},
{-14,9,128, -42,98,69, 232,157},
{-6,8,155, -16,-23,124, 204,153},
{0,11,156, 0,-27,124, 204,153},
{0,43,164, 0,-27,124, 204,153},
{-22,16,154, -17,-22,124, 204,153},
{0,-9,151, 0,0,127, 204,153},
{-9,1,154, -12,-10,126, 204,153},
{-32,-2,150, -11,-9,126, 204,153},
{0,-33,154, 0,0,127, 204,153},
{0,9,175, 0,-26,124, 204,153},
{-10,-2,167, -62,-23,108, 204,153},
{0,-16,170, 0,-26,124, 204,153},
{-9,1,154, -125,-13,-14, 204,153},
{0,-9,151, -97,-77,-28, 204,153},
{0,-16,170, -97,-77,-28, 204,153},
{-10,-2,167, -127,-2,-8, 204,153},
{0,9,136, 0,108,-67, 140,166},
{-6,8,142, -96,79,-28, 156,168},
{-6,8,155, -92,87,-5, 156,175},
{0,11,156, 0,127,0, 140,175},
{-6,8,155, -99,77,17, 204,153},
{0,11,143, 0,126,-16, 140,169},
{0,-9,151, -101,-75,-12, 220,175},
{-9,1,154, -126,-10,-11, 172,175},
{0,11,156, -89,88,23, 204,153},
{0,9,175, -89,88,23, 204,153},
{0,18,107, -54,106,45, 228,172},
{-30,-39,163, -100,-15,76, 144,165},
{-21,-28,177, -85,-4,94, 248,165},
{-27,-10,172, -50,46,107, 252,159},
{-14,-11,176, -27,66,105, 200,165},
{-6,8,155, -18,96,82, 132,157},
{19,-17,123, 59,-98,55, 228,172},
{30,-4,125, 103,13,72, 228,172},
{10,-1,135, 60,19,110, 228,172},
{35,-26,1, 78,-97,23, 228,172},
{29,-15,71, 76,-100,17, 228,172},
{29,16,71, 21,125,3, 168,156},
{32,15,1, 23,125,2, 252,156},
{48,-3,1, 126,3,15, 228,172},
{39,-1,71, 126,2,19, 228,172},
{32,15,1, 102,76,7, 228,172},
{29,16,71, 96,81,20, 228,172},
{7,2,138, 52,33,111, 252,166},
{23,-6,134, 49,18,116, 252,157},
{7,2,138, 122,-5,-35, 172,166},
{8,2,145, 125,-19,-13, 172,170},
{0,-8,140, 102,-74,-13, 212,166},
{14,9,128, 42,98,69, 232,157},
{6,8,155, 16,-23,124, 204,153},
{22,16,154, 17,-22,124, 204,153},
{32,-2,150, 11,-9,126, 204,153},
{9,1,154, 12,-10,126, 204,153},
{10,-2,167, 62,-23,108, 204,153},
{9,1,154, 125,-13,-14, 204,153},
{10,-2,167, 127,-2,-8, 204,153},
{0,-16,170, 97,-77,-28, 204,153},
{0,-9,151, 97,-77,-28, 204,153},
{6,8,142, 96,79,-28, 156,168},
{6,8,155, 92,87,-5, 156,175},
{6,8,155, 99,77,17, 204,153},
{9,1,154, 126,-10,-11, 172,175},
{0,-9,151, 101,-75,-12, 220,175},
{0,11,156, 89,88,23, 204,153},
{0,9,175, 89,88,23, 204,153},
{0,18,107, 54,106,45, 228,172},
}
char0_ind = {
916,67,66,68,69,
916,63,62,66,67,
4,64,65,11,10,
916,5,8,62,63,
916,13,15,16,14,
916,6,13,14,7,
4,9,10,11,12,
916,5,6,7,8,
3,10,17,64,
3,10,9,17,
915,69,60,67,
915,15,13,3,
916,59,2,5,63,
916,1,6,5,2,
916,63,67,60,59,
916,6,1,3,13,
915,69,92,60,
915,15,3,53,
915,60,92,61,
915,3,4,53,
3,25,26,27,
3,25,75,26,
915,0,2,59,
915,0,1,2,
916,60,61,0,59,
916,3,1,0,4,
4,70,71,75,25,
4,18,25,27,19,
4,70,21,20,71,
4,18,19,20,21,
3,43,85,72,
3,43,22,44,
3,43,44,48,
3,43,48,85,
3,72,73,74,
3,22,23,24,
3,22,24,44,
3,72,85,73,
3,85,48,46,
3,44,46,48,
4,74,73,88,89,
4,23,49,50,24,
4,50,45,44,24,
4,88,73,85,86,
3,85,46,86,
3,44,45,46,
820,32,35,78,79,
820,32,33,34,35,
820,79,78,77,76,
820,33,28,31,34,
820,76,77,30,29,
820,28,29,30,31,
819,81,87,82,
819,39,42,47,
820,39,40,41,42,
820,81,82,83,84,
820,90,91,82,87,
820,51,47,42,52,
3,57,58,56,
819,36,38,80,
819,36,37,38,
3,54,55,56,
3,55,57,56,
}
char1_min = {-48,-46,0}
char1_max = {48,44,179}
char1_polycount = 63
char1_vcount = 93
char1_icount = 284
char1_verts = {
{0,-11,135, 0,-83,96, 228,172},
{-19,-16,123, -62,-94,59, 228,172},
{0,-19,121, -4,-120,42, 228,172},
{-30,-4,125, -104,17,71, 228,172},
{-10,-1,135, -60,20,110, 228,172},
{0,-29,72, -9,-125,23, 228,172},
{-30,-16,71, -82,-95,20, 228,172},
{-35,-27,1, -85,-92,22, 228,172},
{1,-46,1, -9,-124,27, 228,172},
{-29,11,71, -21,125,-3, 168,156},
{0,15,71, 0,127,-6, 168,147},
{0,17,1, 0,127,2, 252,147},
{-32,10,1, -23,125,2, 252,156},
{-39,-1,71, -125,16,19, 228,172},
{-48,-3,1, -125,16,15, 228,172},
{-29,11,71, -86,92,16, 228,172},
{-32,10,1, -88,92,5, 228,172},
{0,19,107, 0,126,-13, 120,147},
{-7,2,138, -43,46,110, 252,166},
{-23,-6,136, -40,33,116, 252,157},
{0,-17,138, -2,-10,127, 184,157},
{0,-8,141, -2,-10,127, 200,166},
{-7,2,138, -122,-6,-35, 172,166},
{0,-8,141, -102,-74,-12, 212,166},
{-8,3,145, -125,-19,-13, 172,170},
{0,10,136, -1,107,68, 200,166},
{0,19,107, 0,121,38, 140,157},
{-14,10,128, -39,100,67, 232,157},
{-6,9,155, -11,-17,125, 204,153},
{0,12,156, 0,-25,124, 204,153},
{0,44,163, 0,-25,124, 204,153},
{-22,17,154, -10,-14,126, 204,153},
{0,-9,151, 0,5,127, 204,153},
{-9,2,154, 3,0,127, 204,153},
{-32,-1,154, 3,0,127, 204,153},
{0,-32,155, 0,5,127, 204,153},
{0,10,175, 0,-25,125, 204,153},
{-10,-1,167, -62,-22,109, 204,153},
{0,-15,170, 0,-25,125, 204,153},
{-9,2,154, -125,-14,-14, 204,153},
{0,-9,151, -97,-77,-27, 204,153},
{0,-15,170, -97,-77,-27, 204,153},
{-10,-1,167, -127,-2,-8, 204,153},
{0,10,136, 0,107,-68, 140,166},
{-6,9,142, -96,78,-29, 156,168},
{-6,9,155, -92,87,-6, 156,175},
{0,12,156, 0,127,-2, 140,175},
{-6,9,155, -99,77,16, 204,153},
{0,12,143, 0,126,-18, 140,169},
{0,-9,151, -101,-76,-11, 220,175},
{-9,2,154, -126,-10,-11, 172,175},
{0,12,156, -89,88,22, 204,153},
{0,10,175, -89,88,22, 204,153},
{0,19,107, -58,107,37, 228,172},
{-30,-37,179, -15,31,122, 144,165},
{-21,-27,178, -20,29,122, 248,165},
{-27,-9,172, -26,59,110, 252,159},
{-14,-10,176, -27,68,104, 200,165},
{-6,9,155, -18,97,80, 132,157},
{19,-16,123, 60,-93,63, 228,172},
{30,-4,125, 103,21,71, 228,172},
{10,-1,135, 60,20,110, 228,172},
{35,-34,1, 81,-95,24, 228,172},
{29,-23,71, 78,-97,24, 228,172},
{29,11,71, 21,125,-3, 168,156},
{32,10,1, 23,125,2, 252,156},
{48,-3,1, 124,22,14, 228,172},
{39,-1,71, 124,21,19, 228,172},
{32,10,1, 88,92,5, 228,172},
{29,11,71, 86,92,16, 228,172},
{7,2,138, 41,48,110, 252,166},
{23,-6,137, 36,34,117, 252,157},
{7,2,138, 122,-6,-35, 172,166},
{8,3,145, 125,-19,-13, 172,170},
{0,-8,141, 102,-74,-12, 212,166},
{14,10,128, 38,101,67, 232,157},
{6,9,155, 11,-17,125, 204,153},
{22,17,154, 10,-14,126, 204,153},
{32,-1,154, -3,0,127, 204,153},
{9,2,154, -3,0,127, 204,153},
{10,-1,167, 62,-22,109, 204,153},
{9,2,154, 125,-14,-14, 204,153},
{10,-1,167, 127,-2,-8, 204,153},
{0,-15,170, 97,-77,-27, 204,153},
{0,-9,151, 97,-77,-27, 204,153},
{6,9,142, 96,78,-29, 156,168},
{6,9,155, 92,87,-6, 156,175},
{6,9,155, 99,77,16, 204,153},
{9,2,154, 126,-10,-11, 172,175},
{0,-9,151, 101,-76,-11, 220,175},
{0,12,156, 89,88,22, 204,153},
{0,10,175, 89,88,22, 204,153},
{0,19,107, 58,107,37, 228,172},
}
char1_ind = {
4,9,10,11,12,
4,64,65,11,10,
916,13,15,16,14,
916,67,66,68,69,
916,6,13,14,7,
916,63,62,66,67,
916,5,6,7,8,
916,5,8,62,63,
3,10,9,17,
3,10,17,64,
915,15,13,3,
915,69,60,67,
916,1,6,5,2,
916,59,2,5,63,
916,6,1,3,13,
916,63,67,60,59,
915,15,3,53,
915,69,92,60,
915,3,4,53,
915,60,92,61,
3,25,26,27,
3,25,75,26,
915,0,2,59,
915,0,1,2,
916,60,61,0,59,
916,3,1,0,4,
4,18,25,27,19,
4,70,71,75,25,
4,18,19,20,21,
4,70,21,20,71,
3,43,85,72,
3,43,22,44,
3,43,48,85,
3,43,44,48,
3,22,23,24,
3,72,73,74,
3,72,85,73,
3,22,24,44,
3,44,46,48,
3,85,48,46,
4,23,49,50,24,
4,74,73,88,89,
4,88,73,85,86,
4,50,45,44,24,
3,44,45,46,
3,85,46,86,
820,32,35,78,79,
820,32,33,34,35,
820,79,78,77,76,
820,33,28,31,34,
820,76,77,30,29,
820,28,29,30,31,
819,81,87,82,
819,39,42,47,
820,81,82,83,84,
820,39,40,41,42,
820,90,91,82,87,
820,51,47,42,52,
3,57,58,56,
819,36,37,38,
819,36,38,80,
3,55,57,56,
3,54,55,56,
}
char2_min = {-50,-41,0}
char2_max = {48,29,177}
char2_polycount = 63
char2_vcount = 93
char2_icount = 284
char2_verts = {
{-1,-11,135, -9,-84,95, 228,172},
{-21,-15,123, -67,-93,56, 228,172},
{-2,-20,121, -11,-122,34, 228,172},
{-30,-1,125, -102,23,73, 228,172},
{-10,0,135, -58,26,110, 228,172},
{-2,-23,71, -7,-126,16, 228,172},
{-29,-14,71, -80,-97,18, 228,172},
{-35,-25,1, -80,-96,23, 228,172},
{0,-41,1, -3,-124,27, 228,172},
{-28,17,71, -18,126,3, 168,156},
{2,20,71, 4,127,4, 168,147},
{0,22,1, 2,127,2, 252,147},
{-32,15,1, -21,125,1, 252,156},
{-39,1,71, -126,5,18, 228,172},
{-48,-3,1, -126,4,15, 228,172},
{-28,17,71, -93,84,18, 228,172},
{-32,15,1, -100,78,6, 228,172},
{2,18,107, 4,127,6, 120,147},
{-6,3,138, -46,55,105, 252,166},
{-23,-1,134, -49,37,111, 252,157},
{-10,-12,135, -18,-32,121, 184,157},
{-7,-4,140, -19,-32,121, 200,166},
{-6,3,138, -114,55,-6, 172,166},
{-7,-4,140, -121,35,-13, 212,166},
{-5,8,145, -85,90,-29, 172,170},
{1,9,136, 19,104,71, 200,166},
{2,18,107, 17,119,40, 140,157},
{-13,11,128, -25,105,67, 232,157},
{2,10,155, -28,3,124, 204,153},
{8,7,156, -24,-13,124, 204,153},
{36,22,164, -24,-13,124, 204,153},
{2,29,154, -27,4,124, 204,153},
{-10,-3,151, 0,0,127, 204,153},
{-5,10,154, -14,6,126, 204,153},
{-19,29,150, -14,6,126, 204,153},
{-31,-15,154, 0,0,127, 204,153},
{6,6,175, -23,-13,124, 204,153},
{-9,9,167, -50,44,108, 204,153},
{-16,-6,170, -23,-13,124, 204,153},
{-5,10,154, -72,104,-14, 204,153},
{-10,-3,151, -114,49,-29, 204,153},
{-16,-6,170, -114,49,-29, 204,153},
{-9,9,167, -62,111,-8, 204,153},
{1,9,136, 10,118,-47, 140,166},
{1,10,142, -3,125,-22, 156,168},
{2,10,155, 32,122,-13, 156,175},
{8,7,156, 111,62,-6, 140,175},
{2,10,155, 21,124,17, 204,153},
{7,7,143, 101,72,-30, 140,169},
{-10,-3,151, -116,43,-30, 220,175},
{-5,10,154, -71,103,-23, 172,175},
{8,7,156, 35,120,23, 204,153},
{6,6,175, 35,120,23, 204,153},
{2,18,107, -44,111,42, 228,172},
{-50,9,163, -61,81,76, 144,165},
{-36,6,177, -44,73,94, 248,165},
{-24,20,172, 17,66,107, 252,159},
{-18,8,176, 45,55,105, 200,165},
{2,10,155, 75,62,82, 132,157},
{18,-19,123, 51,-103,55, 228,172},
{29,-7,125, 105,3,72, 228,172},
{10,-2,135, 61,13,111, 228,172},
{35,-26,1, 76,-99,22, 228,172},
{28,-17,71, 71,-104,16, 228,172},
{29,15,71, 24,125,3, 168,156},
{32,15,1, 25,124,2, 252,156},
{48,-4,1, 126,1,15, 228,172},
{39,-2,71, 126,-1,19, 228,172},
{32,15,1, 103,74,8, 228,172},
{29,15,71, 99,77,22, 228,172},
{6,0,138, 51,10,116, 252,166},
{20,-11,134, 49,6,117, 252,157},
{6,0,138, 112,-32,-51, 172,166},
{4,-4,145, 56,-112,-24, 172,170},
{-7,-4,140, 4,-125,-23, 212,166},
{15,7,128, 59,88,70, 232,157},
{8,0,155, -13,-25,124, 204,153},
{23,-11,154, -11,-25,124, 204,153},
{11,-28,150, -3,-14,126, 204,153},
{4,-6,154, -3,-15,126, 204,153},
{1,-9,167, 9,-65,108, 204,153},
{4,-6,154, 48,-117,-14, 204,153},
{1,-9,167, 59,-112,-8, 204,153},
{-16,-6,170, -21,-122,-28, 204,153},
{-10,-3,151, -21,-122,-28, 204,153},
{8,1,142, 122,-22,-28, 156,168},
{8,0,155, 121,-38,-9, 156,175},
{8,0,155, 115,-51,17, 204,153},
{4,-6,154, 56,-114,-12, 172,175},
{-10,-3,151, -8,-127,-8, 220,175},
{8,7,156, 119,-36,23, 204,153},
{6,6,175, 119,-36,23, 204,153},
{2,18,107, 63,100,46, 228,172},
}
char2_ind = {
916,67,66,68,69,
916,63,62,66,67,
4,64,65,11,10,
916,5,8,62,63,
916,13,15,16,14,
916,6,13,14,7,
4,9,10,11,12,
916,5,6,7,8,
3,10,17,64,
3,10,9,17,
915,69,60,67,
915,15,13,3,
916,59,2,5,63,
916,1,6,5,2,
916,63,67,60,59,
916,6,1,3,13,
915,69,92,60,
915,15,3,53,
915,60,92,61,
915,3,4,53,
3,25,26,27,
3,25,75,26,
915,0,2,59,
915,0,1,2,
916,60,61,0,59,
916,3,1,0,4,
4,70,71,75,25,
4,18,25,27,19,
4,70,21,20,71,
4,18,19,20,21,
3,43,85,72,
3,43,22,44,
3,43,44,48,
3,43,48,85,
3,72,73,74,
3,22,23,24,
3,22,24,44,
3,72,85,73,
3,85,48,46,
3,44,46,48,
4,74,73,88,89,
4,23,49,50,24,
4,50,45,44,24,
4,88,73,85,86,
3,85,46,86,
3,44,45,46,
820,32,35,78,79,
820,32,33,34,35,
820,79,78,77,76,
820,33,28,31,34,
820,76,77,30,29,
820,28,29,30,31,
819,81,87,82,
819,39,42,47,
820,39,40,41,42,
820,81,82,83,84,
820,90,91,82,87,
820,51,47,42,52,
3,57,58,56,
819,36,38,80,
819,36,37,38,
3,54,55,56,
3,55,57,56,
}
char0 = {v = char0_verts, vc = char0_vcount, pc = char0_polycount, iv=char0_ind}
char1 = {v = char1_verts, vc = char1_vcount, pc = char1_polycount, iv=char1_ind}
char2 = {v = char2_verts, vc = char2_vcount, pc = char2_polycount, iv=char2_ind}
char = deepcopy( char0 )
box_min = {-32,-32,-32}
box_max = {32,32,32}
box_polycount = 6
box_vcount = 24
box_icount = 30
box_verts = {
{-32,-32,-32, 0,0,-127, 100,241},
{-32,32,-32, 0,0,-127, 188,241},
{32,32,-32, 0,0,-127, 188,252},
{32,-32,-32, 0,0,-127, 100,252},
{-32,-32,32, 0,0,127, 100,241},
{32,-32,32, 0,0,127, 188,241},
{32,32,32, 0,0,127, 188,252},
{-32,32,32, 0,0,127, 100,252},
{32,-32,-32, 127,0,0, 100,241},
{32,32,-32, 127,0,0, 188,241},
{32,32,32, 127,0,0, 188,252},
{32,-32,32, 127,0,0, 100,252},
{32,32,-32, 0,127,0, 100,241},
{-32,32,-32, 0,127,0, 188,241},
{-32,32,32, 0,127,0, 188,252},
{32,32,32, 0,127,0, 100,252},
{-32,32,-32, -127,0,0, 100,241},
{-32,-32,-32, -127,0,0, 188,241},
{-32,-32,32, -127,0,0, 188,252},
{-32,32,32, -127,0,0, 100,252},
{-32,-32,-32, 0,-127,0, 100,241},
{32,-32,-32, 0,-127,0, 188,241},
{32,-32,32, 0,-127,0, 188,252},
{-32,-32,32, 0,-127,0, 100,252},
}
box_ind = {
4,0,1,2,3,
4,20,21,22,23,
4,16,17,18,19,
4,12,13,14,15,
4,8,9,10,11,
4,4,5,6,7,
}
box = {v = box_verts, vc = box_vcount, pc = box_polycount, iv=box_ind}
grass_min = {-2,-2,0}
grass_max = {258,258,142}
grass_polycount = 8
grass_vcount = 26
grass_icount = 40
grass_verts = {
{128,256,128, 0,-126,19, 128,144},
{256,256,128, 0,-126,19, 256,144},
{258,258,142, 0,-126,19, 256,146},
{128,258,142, 0,-126,19, 128,146},
{0,0,128, 126,0,19, 0,144},
{0,128,128, 126,0,19, 128,144},
{-2,128,142, 126,0,19, 128,146},
{-2,-2,142, 126,0,19, 0,146},
{0,256,128, 126,0,19, 256,144},
{-2,258,142, 126,0,19, 256,146},
{0,0,128, 0,0,127, 256,128},
{128,0,128, 0,0,127, 128,128},
{128,128,128, 0,0,127, 128,144},
{0,128,128, 0,0,127, 256,144},
{0,128,128, 0,0,127, 0,128},
{128,128,128, 0,0,127, 128,128},
{128,256,128, 0,0,127, 128,144},
{0,256,128, 0,0,127, 0,144},
{256,128,128, 0,0,127, 0,144},
{256,256,128, 0,0,127, 0,128},
{128,256,128, 0,0,127, 128,128},
{128,0,128, 0,0,127, 128,144},
{256,0,128, 0,0,127, 256,144},
{256,128,128, 0,0,127, 256,128},
{0,256,128, 0,-126,19, 0,144},
{-2,258,142, 0,-126,19, 0,146},
}
grass_ind = {
4,21,22,23,15,
4,12,18,19,20,
4,14,15,16,17,
4,10,11,12,13,
4,24,0,3,25,
4,5,8,9,6,
4,4,5,6,7,
4,0,1,2,3,
}
hex_min = {-12,0,-128}
hex_max = {260,256,160}
hex_polycount = 15
hex_vcount = 44
hex_icount = 77
hex_verts = {
{20,244,-128, 104,73,0, 220,240},
{-2,252,-128, -44,119,0, 240,240},
{-2,252,160, -44,119,0, 240,252},
{20,244,160, 104,73,0, 220,252},
{-2,216,-128, -49,-117,0, 232,240},
{20,222,-128, 101,-77,0, 244,240},
{20,222,160, 101,-77,0, 244,252},
{-2,216,160, -49,-117,0, 232,252},
{20,244,-128, 104,73,0, 232,240},
{20,244,160, 104,73,0, 232,252},
{-12,234,-128, -127,0,0, 220,240},
{-12,234,160, -127,0,0, 220,252},
{0,0,128, 0,0,127, 0,174},
{256,0,128, 0,0,127, 0,155},
{256,256,128, 0,0,127, 128,156},
{0,256,128, 0,0,127, 128,174},
{-12,234,160, 0,0,127, 144,187},
{-2,216,160, 0,0,127, 152,189},
{20,222,160, 0,0,127, 136,191},
{20,244,160, 0,0,127, 116,190},
{-2,252,160, 0,0,127, 124,187},
{260,42,-128, 101,77,0, 220,240},
{238,48,-128, -49,117,0, 240,240},
{238,48,160, -49,117,0, 240,252},
{260,42,160, 101,77,0, 220,252},
{238,12,-128, -44,-119,0, 232,240},
{260,20,-128, 104,-73,0, 244,240},
{260,20,160, 104,-73,0, 244,252},
{238,12,160, -44,-119,0, 232,252},
{260,42,-128, 101,77,0, 232,240},
{260,42,160, 101,77,0, 232,252},
{228,30,-128, -127,0,0, 220,240},
{228,30,160, -127,0,0, 220,252},
{228,30,160, 0,0,127, 144,187},
{238,12,160, 0,0,127, 152,189},
{260,20,160, 0,0,127, 136,191},
{260,42,160, 0,0,127, 116,190},
{238,48,160, 0,0,127, 124,187},
{256,0,128, 90,-90,0, 0,155},
{0,0,128, 0,-127,0, 0,174},
{0,0,112, 0,-127,0, 0,174},
{256,0,112, 90,-90,0, 0,155},
{256,256,128, 127,0,0, 128,156},
{256,256,112, 127,0,0, 128,156},
}
hex_ind = {
4,22,31,32,23,
4,31,25,28,32,
4,26,29,30,27,
4,25,26,27,28,
4,21,22,23,24,
4,1,10,11,2,
4,10,4,7,11,
4,5,8,9,6,
4,4,5,6,7,
4,0,1,2,3,
4,42,38,41,43,
4,38,39,40,41,
4,12,13,14,15,
5,33,34,35,36,37,
5,16,17,18,19,20,
}
hex2_min = {0,0,0}
hex2_max = {256,256,128}
hex2_polycount = 35
hex2_vcount = 146
hex2_icount = 181
hex2_verts = {
{0,0,120, 0,-90,90, 76,224},
{42,0,120, 0,-90,90, 108,224},
{38,8,128, 0,-90,90, 108,226},
{0,8,128, 0,-90,90, 75,226},
{42,0,120, 78,-52,85, 8,224},
{84,64,120, 78,-52,85, 64,224},
{76,64,128, 78,-52,85, 64,226},
{38,8,128, 78,-52,85, 8,226},
{84,64,120, 78,52,85, 64,224},
{42,128,120, 78,52,85, 16,224},
{38,120,128, 78,52,85, 16,226},
{76,64,128, 78,52,85, 64,226},
{0,120,128, 0,0,127, 33,238},
{0,8,128, 0,0,127, 91,227},
{38,8,128, 0,0,127, 120,229},
{76,64,128, 0,0,127, 120,236},
{38,120,128, 0,0,127, 64,240},
{84,192,120, 78,52,85, 64,224},
{42,256,120, 78,52,85, 16,224},
{38,248,128, 78,52,85, 16,226},
{76,192,128, 78,52,85, 64,226},
{0,248,128, 0,0,127, 33,238},
{0,134,128, 0,0,127, 91,227},
{38,134,128, 0,0,127, 120,229},
{76,192,128, 0,0,127, 120,236},
{38,248,128, 0,0,127, 64,240},
{202,0,128, 0,0,127, 120,236},
{166,58,128, 0,0,127, 64,240},
{88,58,128, 0,0,127, 4,236},
{50,0,128, 0,0,127, 4,229},
{42,256,120, 0,90,90, 16,224},
{0,256,120, 0,90,90, 39,224},
{0,248,128, 0,90,90, 40,226},
{38,248,128, 0,90,90, 16,226},
{42,128,120, 0,90,90, 16,224},
{0,128,120, 0,90,90, 39,224},
{0,120,128, 0,90,90, 40,226},
{38,120,128, 0,90,90, 16,226},
{88,198,128, 0,0,127, 64,225},
{166,198,128, 0,0,127, 120,229},
{202,256,128, 0,0,127, 120,236},
{50,256,128, 0,0,127, 4,229},
{176,64,128, 0,0,127, 4,229},
{216,8,128, 0,0,127, 64,225},
{256,8,128, 0,0,127, 91,227},
{256,120,128, 0,0,127, 33,238},
{216,120,128, 0,0,127, 4,236},
{42,128,120, -78,-52,85, 4,224},
{84,64,120, -78,-52,85, 44,224},
{88,72,128, -78,-52,85, 44,226},
{50,128,128, -78,-52,85, 4,226},
{84,192,120, -78,52,85, 64,224},
{42,128,120, -78,52,85, 4,224},
{50,128,128, -78,52,85, 4,226},
{88,184,128, -78,52,85, 64,226},
{168,64,120, 83,-54,79, 8,224},
{210,128,120, 83,-54,79, 64,224},
{202,128,128, 83,-54,79, 64,226},
{166,72,128, 83,-54,79, 8,226},
{210,128,120, 83,54,79, 64,224},
{168,192,120, 83,54,79, 16,224},
{166,184,128, 83,54,79, 16,226},
{202,128,128, 83,54,79, 64,226},
{84,64,120, 0,-90,90, 44,224},
{168,64,120, 0,-90,90, 108,224},
{166,72,128, 0,-90,90, 108,226},
{88,72,128, 0,-90,90, 44,226},
{168,192,120, 0,90,90, 16,224},
{84,192,120, 0,90,90, 64,224},
{88,184,128, 0,90,90, 64,226},
{166,184,128, 0,90,90, 16,226},
{210,0,120, 86,55,75, 64,224},
{168,64,120, 86,55,75, 16,224},
{166,58,128, 86,55,75, 16,226},
{202,0,128, 86,55,75, 64,226},
{168,64,120, 0,102,76, 16,224},
{84,64,120, 0,102,76, 64,224},
{88,58,128, 0,102,76, 64,226},
{166,58,128, 0,102,76, 16,226},
{168,64,120, -74,-51,90, 4,224},
{210,0,120, -74,-51,90, 44,224},
{216,8,128, -74,-51,90, 44,226},
{176,64,128, -74,-51,90, 4,226},
{210,128,120, -74,51,90, 64,224},
{168,64,120, -74,51,90, 4,224},
{176,64,128, -74,51,90, 4,226},
{216,120,128, -74,51,90, 64,226},
{256,128,120, 0,90,90, 39,224},
{210,128,120, 0,90,90, 64,224},
{216,120,128, 0,90,90, 64,226},
{256,120,128, 0,90,90, 40,226},
{168,192,120, -77,-52,87, 4,224},
{210,128,120, -77,-52,87, 44,224},
{216,134,128, -77,-52,87, 44,226},
{176,192,128, -77,-52,87, 4,226},
{210,256,120, -74,51,90, 64,224},
{168,192,120, -74,51,90, 4,224},
{176,192,128, -74,51,90, 4,226},
{216,248,128, -74,51,90, 64,226},
{256,256,120, 0,90,90, 39,224},
{210,256,120, 0,90,90, 64,224},
{216,248,128, 0,90,90, 64,226},
{256,248,128, 0,90,90, 40,226},
{42,128,120, 82,-54,81, 8,224},
{84,192,120, 82,-54,81, 64,224},
{76,192,128, 82,-54,81, 64,226},
{38,134,128, 82,-54,81, 8,226},
{0,128,120, 0,-102,76, 76,224},
{42,128,120, 0,-102,76, 108,224},
{38,134,128, 0,-102,76, 108,226},
{0,134,128, 0,-102,76, 75,226},
{42,256,120, -82,-54,81, 4,224},
{84,192,120, -82,-54,81, 44,224},
{88,198,128, -82,-54,81, 44,226},
{50,256,128, -82,-54,81, 4,226},
{168,192,120, 86,-55,75, 8,224},
{210,256,120, 86,-55,75, 64,224},
{202,256,128, 86,-55,75, 64,226},
{166,198,128, 86,-55,75, 8,226},
{84,192,120, 0,-102,76, 44,224},
{168,192,120, 0,-102,76, 108,224},
{166,198,128, 0,-102,76, 108,226},
{88,198,128, 0,-102,76, 44,226},
{84,64,120, -82,54,81, 64,224},
{42,0,120, -82,54,81, 4,224},
{50,0,128, -82,54,81, 4,226},
{88,58,128, -82,54,81, 64,226},
{88,72,128, 0,0,127, 4,229},
{166,72,128, 0,0,127, 64,225},
{202,128,128, 0,0,127, 120,229},
{166,184,128, 0,0,127, 120,236},
{88,184,128, 0,0,127, 64,240},
{50,128,128, 0,0,127, 4,236},
{256,134,128, 0,0,127, 4,233},
{256,248,128, 0,0,127, 120,233},
{216,248,128, 0,0,127, 120,236},
{176,192,128, 0,0,127, 64,240},
{216,134,128, 0,0,127, 4,236},
{210,128,120, 0,-102,76, 44,224},
{256,128,120, 0,-102,76, 76,224},
{256,134,128, 0,-102,76, 74,226},
{216,134,128, 0,-102,76, 44,226},
{210,0,120, 0,-90,90, 44,224},
{256,0,120, 0,-90,90, 76,224},
{256,8,128, 0,-90,90, 74,226},
{216,8,128, 0,-90,90, 44,226},
}
hex2_ind = {
4,142,143,144,145,
4,138,139,140,141,
4,123,124,125,126,
4,119,120,121,122,
4,115,116,117,118,
4,111,112,113,114,
4,107,108,109,110,
4,103,104,105,106,
4,99,100,101,102,
4,95,96,97,98,
4,91,92,93,94,
4,87,88,89,90,
4,83,84,85,86,
4,79,80,81,82,
4,75,76,77,78,
4,71,72,73,74,
4,67,68,69,70,
4,63,64,65,66,
4,59,60,61,62,
4,55,56,57,58,
4,51,52,53,54,
4,47,48,49,50,
4,34,35,36,37,
4,30,31,32,33,
4,17,18,19,20,
4,8,9,10,11,
4,4,5,6,7,
4,0,1,2,3,
5,133,134,135,136,137,
6,127,128,129,130,131,132,
5,42,43,44,45,46,
4,38,39,40,41,
4,26,27,28,29,
5,21,22,23,24,25,
5,12,13,14,15,16,
}
tile={
   {v = grass_verts, vc = grass_vcount, pc = grass_polycount, iv=grass_ind},
   {v = hex_verts, vc = hex_vcount, pc = hex_polycount, iv=hex_ind},--bridge
   {v = hex2_verts, vc = hex2_vcount, pc = hex2_polycount, iv=hex2_ind},
   {v = hex2_verts, vc = hex2_vcount, pc = hex2_polycount, iv=hex2_ind},
}
local map={
   1,1,1,1,1,3,3,3,
   1,1,1,3,3,3,3,3,
   1,1,3,3,3,3,3,3,
   1,1,3,3,3,3,2,3,
   2,0,2,2,2,0,2,0,
   2,0,2,0,2,0,2,2,
   2,0,2,0,2,0,0,0,
   2,2,2,1,2,0,0,0,
}
local jumpeth = 0
function render()
   if (btnp((4)) and 1 or 0 ) then jumpeth = tick end
   do
   local d,a,b,t = char.v, char0.v, char1.v,0
   local pv = min(1,vlen(PV,1))--, PV, 1))
   if pv > .1 then
   t = sin(stepcounter)
   STEPBOUNCE = t*pv*2
   t = t*.5 + .5
   else
   end
   local it = 1-t
   for i = 1, char.vc do
   for j = 1, 3 do d[i][j] = a[i][j]*it + b[i][j]*t end
   end
   end
   cls(0)
   local l = light[0]
   local lx = PP[1] + cos(tick*.01)*100--+ 40 +
   local ly = PP[2] + sin(tick*.01)*100 - 50 --sin(tick*.001)*100
   local lz = PP[3] + 200
   l[1] = l[1]+(lx-l[1])*.052
   l[2] = l[2]+(ly-l[2])*.052
   l[3] = l[3]+(lz-l[3])*.052
   if C_mode == 0 then MAT3_FPS( CM, CA[1],CA[3] ) end
   Xx= CM[1] Xy= CM[4] Xz= CM[7]Yx= CM[2] Yy= CM[5] Yz= CM[8]Zx= CM[3] Zy= CM[6] Zz= CM[9]Tx = -( Xx*CM[10] + Yx*CM[11] + Zx*CM[12] )Ty = -( Xy*CM[10] + Yy*CM[11] + Zy*CM[12] )Tz = -( Xz*CM[10] + Yz*CM[11] + Zz*CM[12] )
   draw_stars()
   proc_lights()
   if false then
   local t = tick *.01
   local cx,cy,q = 120, 68, 3.1415926535897932384626433832795/2
   local a={cx+cos(t+0*q)*100,cy+sin(t+0*q)*100,1, 0,0,.01}
   local b={cx+cos(t+1*q)*100,cy+sin(t+1*q)*100,1, 100,0,1}
   local c={cx+cos(t+2*q)*100,cy+sin(t+2*q)*100,1, 100,100,.01}
   local d={cx+cos(t+2.5*q)*100,cy+sin(t+2.5*q)*100,1, 0,100,1}
   raz(a,b,c,1) raz(a,c,d,1)
   end
   local MM={1,0,0, 0,1,0, 0,0,1, 0,0,0}
   local xi = flr(PP[1]/256)
   local yi = flr(PP[2]/256)
   local xi0 = min(8,max(1,xi-2))
   local yi0 = min((8 -1),max(0,yi-1))
   local xi1 = max(1,min(8,xi+2))
   local yi1 = max(0,min((8 -1),yi+3))
   for y = yi1, yi0,-1 do
   for x = xi0, xi1 do
   local t = map[(y<<3) + x ]
   if t > 0 then
   MM[11]=256*y
   MM[10]=256*(x-1)
   Xx=CM[1]*MM[1] + CM[2]*MM[2] + CM[3]*MM[3] Xy=CM[4]*MM[1] + CM[5]*MM[2] + CM[6]*MM[3] Xz=CM[7]*MM[1] + CM[8]*MM[2] + CM[9]*MM[3] Yx=CM[1]*MM[4] + CM[2]*MM[5] + CM[3]*MM[6] Yy=CM[4]*MM[4] + CM[5]*MM[5] + CM[6]*MM[6] Yz=CM[7]*MM[4] + CM[8]*MM[5] + CM[9]*MM[6] Zx=CM[1]*MM[7] + CM[2]*MM[8] + CM[3]*MM[9] Zy=CM[4]*MM[7] + CM[5]*MM[8] + CM[6]*MM[9] Zz=CM[7]*MM[7] + CM[8]*MM[8] + CM[9]*MM[9] local cx_ = MM[10]-CM[10] local cy_ = MM[11]-CM[11] local cz_ = MM[12]-CM[12] Tx = CM[1]*cx_ + CM[2]*cy_ + CM[3]*cz_ Ty = CM[4]*cx_ + CM[5]*cy_ + CM[6]*cz_ Tz = CM[7]*cx_ + CM[8]*cy_ + CM[9]*cz_
   t = tile[ t ]
   mesh_draw( t.v, t.vc, t.iv, t.pc, MM )
   end
   end
   end
   do--if x == xi and y == yi then
   local dx,dy,dz = PD[1],PD[2],PD[3]--sin(tick*.01),cos(tick*.01)
   local ux,uy,uz,rx,ry,rz,rl = PU[1],PU[2],PU[3]
   rx=dy*uz - dz*uy
   ry=dz*ux - dx*uz
   rz=dx*uy - dy*ux
   rl=1/sqrt(rx*rx+ry*ry+rz*rz)
   rx,ry,rz = rx*rl,ry*rl,rz*rl
   dx=uy*rz - uz*ry
   dy=uz*rx - ux*rz
   dz=ux*ry - uy*rx
   local pm ={
   rx*.5,ry*.5,rz*.5,
   dx*.5,dy*.5,dz*.5,
   ux*.5,uy*.5,uz*.5,
   PP[1],PP[2],PP[3]+STEPBOUNCE
   }
   local l,lx,ly,lz,lr = light[0]
   lx,ly,lz = l[1]-PP[1],l[2]-PP[2],l[3]-PP[3]
   lr = 1./sqrt(lx*lx+ly*ly+lz*lz)
   lx,ly,lz=lx*lr,ly*lr,lz*lr
   local SM={
   rx*.6,ry*.6,0,
   dx*.6,dy*.6,0,
   -lz*lx,-lz*ly,0, --normal to light ?
   PP[1],--+lx*(PP[3]-128),
   PP[2],--+ly*(PP[3]-128),
   128
   };
   Xx= CM[1] Xy= CM[4] Xz= CM[7]Yx= CM[2] Yy= CM[5] Yz= CM[8]Zx= CM[3] Zy= CM[6] Zz= CM[9]Tx = -( Xx*CM[10] + Yx*CM[11] + Zx*CM[12] )Ty = -( Xy*CM[10] + Yy*CM[11] + Zy*CM[12] )Tz = -( Xz*CM[10] + Yz*CM[11] + Zz*CM[12] )
   Xx=CM[1]*SM[1] + CM[2]*SM[2] + CM[3]*SM[3] Xy=CM[4]*SM[1] + CM[5]*SM[2] + CM[6]*SM[3] Xz=CM[7]*SM[1] + CM[8]*SM[2] + CM[9]*SM[3] Yx=CM[1]*SM[4] + CM[2]*SM[5] + CM[3]*SM[6] Yy=CM[4]*SM[4] + CM[5]*SM[5] + CM[6]*SM[6] Yz=CM[7]*SM[4] + CM[8]*SM[5] + CM[9]*SM[6] Zx=CM[1]*SM[7] + CM[2]*SM[8] + CM[3]*SM[9] Zy=CM[4]*SM[7] + CM[5]*SM[8] + CM[6]*SM[9] Zz=CM[7]*SM[7] + CM[8]*SM[8] + CM[9]*SM[9] local cx_ = SM[10]-CM[10] local cy_ = SM[11]-CM[11] local cz_ = SM[12]-CM[12] Tx = CM[1]*cx_ + CM[2]*cy_ + CM[3]*cz_ Ty = CM[4]*cx_ + CM[5]*cy_ + CM[6]*cz_ Tz = CM[7]*cx_ + CM[8]*cy_ + CM[9]*cz_
   mesh_draw_unlit( char.v, char.vc, char.iv, char.pc, SM )
   Xx=CM[1]*pm[1] + CM[2]*pm[2] + CM[3]*pm[3] Xy=CM[4]*pm[1] + CM[5]*pm[2] + CM[6]*pm[3] Xz=CM[7]*pm[1] + CM[8]*pm[2] + CM[9]*pm[3] Yx=CM[1]*pm[4] + CM[2]*pm[5] + CM[3]*pm[6] Yy=CM[4]*pm[4] + CM[5]*pm[5] + CM[6]*pm[6] Yz=CM[7]*pm[4] + CM[8]*pm[5] + CM[9]*pm[6] Zx=CM[1]*pm[7] + CM[2]*pm[8] + CM[3]*pm[9] Zy=CM[4]*pm[7] + CM[5]*pm[8] + CM[6]*pm[9] Zz=CM[7]*pm[7] + CM[8]*pm[8] + CM[9]*pm[9] local cx_ = pm[10]-CM[10] local cy_ = pm[11]-CM[11] local cz_ = pm[12]-CM[12] Tx = CM[1]*cx_ + CM[2]*cy_ + CM[3]*cz_ Ty = CM[4]*cx_ + CM[5]*cy_ + CM[6]*cz_ Tz = CM[7]*cx_ + CM[8]*cy_ + CM[9]*cz_
   mesh_draw( char.v, char.vc, char.iv, char.pc, pm )
   end
   Xx= CM[1] Xy= CM[4] Xz= CM[7]Yx= CM[2] Yy= CM[5] Yz= CM[8]Zx= CM[3] Zy= CM[6] Zz= CM[9]Tx = -( Xx*CM[10] + Yx*CM[11] + Zx*CM[12] )Ty = -( Xy*CM[10] + Yy*CM[11] + Zy*CM[12] )Tz = -( Xz*CM[10] + Yz*CM[11] + Zz*CM[12] )
   line3( 0,0,0, 100,0,0, 8 )
   line3( 0,0,0, 0,100,0, 9 )
   line3( 0,0,0, 0,0,100, 10 )
   line3( PP[1],PP[2],PP[3],
    PP[1]+PD[1]*32, PP[2]+PD[2]*32, PP[3]+PD[3]*32,12)
   line3( PP[1],PP[2],PP[3],
    PP[1]+PU[1]*32, PP[2]+PU[2]*32, PP[3]+PU[3]*32,12)
   for i=0,2 do point3( light[i][1],light[i][2],light[i][3],2) end
end
function draw_stars()
   local seed,x,y,z,x0,y0,z0,fov = 1245,0,0,0, 0,0,0, 0
   for i=0,120 do
   x,seed=(seed&255)-128,(seed<<2)+(seed>>1)
   y,seed=(seed&255)-128,(seed<<2)+(seed>>1)
   z,seed=(seed&255)>>1,(seed<<2)+(seed>>1)
   z0 = Xz*x + Yz*y + Zz*z
   if z0 < -0 then
   fov = (136*ZOOM)/z0
   pix( flr((Xx*x+Yx*y+Zx*z)*-fov + 120),
     flr((Xy*x + Yy*y + Zy*z)*fov + 68),
     1+(z>>3))
   end
   end
end
function update()
   local ax = (btn((3)) and 1 or 0 )-(btn((2)) and 1 or 0 )
   local ay = (btn((0)) and 1 or 0 )-(btn((1)) and 1 or 0 )
   local az = (btn((4)) and 1 or 0 )-(btn((5)) and 1 or 0 )
   if C_mode == 0 then
   if btn( 4 ) then --strafe
   for i=0,2 do CV[1 +i]=CV[1 +i]+CM[1 +i]*ax*1 end
   else --rotate 3
   CW[3] = CW[3]+ax*-.00125
   end
   if btn( 5 ) then
   CW[1] = CW[1] + ay*.00125
   else--walk forth
   for i=0,2 do CV[1 +i]=CV[1 +i]-CM[7 +i]*ay*1 end
   end
   for i=0,2 do
   CW[1 +i]=CW[1 +i]*.9
   CV[1 +i]=CV[1 +i]*.97
   CP[1 +i]=CP[1 +i]+CV[1 +i]
   CM[10 +i]=CP[1 +i]
   CA[1 +i] = CA[1 +i]+CW[1 +i]
   end
   elseif C_mode == 1 then
   local ix,iy = flr(PP[1]/256), flr(PP[2]/256)
   local ground = ix>=0 and ix<8 and iy>=0 and
   iy<8 and map[(iy*8)+ix+1]>0
   local grounded = ground and PP[3]==128
   if ground and PP[3] <= 128 and PP[3] > 64 and PV[3] <= 0 then
   PV[3]=0
   PP[3]=128
   grounded = 1
   end
   if grounded then
   if PP[3] == 128 and tick - jumpeth < 3 then
   jumpeth = 0
   end
   else
   PV[3] = PV[3]-.5
   end
   local ux = PU[1] + (PV[1]-PVL[1])*.1
   local uy = PU[2] + (PV[2]-PVL[2])*.1
   PVL[1],PVL[2]=PV[1],PV[2]
   local uz = PU[3] + .05
   local ul = 1./sqrt(ux*ux+uy*uy+uz*uz)
   PU[1],PU[2],PU[3]=ux*ul,uy*ul,uz*ul
   if not (ax==0 and ay==0) then --else
   if not (ax==0 or ay==0) then ax,ay = ax*.71, ay*.71 end
   PV[1] = PV[1] + .35*ax
   PV[2] = PV[2] + .35*ay
   local dx,dy = PD[1]+ax*.13,PD[2]+ay*.13
   local len = sqrt(dx*dx+dy*dy)
   if len > 0 then PD[1],PD[2]=dx/len,dy/len else PD[1],PD[2]=0,1 end
   stepcounter = stepcounter + .24
   end
   for i=0,2 do
   PV[1 +i]=PV[1 +i]*.93
   PP[1 +i]=PP[1 +i]+PV[1 +i]
   end
   local tx,ty,tz = PP[1]+0,PP[2]-500,PP[3]+350
   CP[1]=CP[1]+(tx-CP[1])*.1
   CP[2]=CP[2]+(ty-CP[2])*.1
   CP[3]=CP[3]+(tz-CP[3])*.1
   Zx,Zy,Zz = CP[1]-PP[1], CP[2]-PP[2], CP[3]-(PP[3]+128)
   local rl = sqrt( Zx*Zx + Zy*Zy + Zz*Zz )
   if rl > .001 then
   Zx,Zy,Zz = Zx/rl,Zy/rl,Zz/rl
   Xx,Xy,Xz = -Zy,Zx,0
   rl = sqrt( Xx*Xx + Xy*Xy )
   if rl > .001 then
   Xx,Xy = Xx/rl,Xy/rl
   CM[1],CM[2],CM[3] = Xx,Xy,Xz
   CM[7],CM[8],CM[9] = Zx,Zy,Zz
   CM[4] = Zy*Xz - Zz*Xy
   CM[5] = Zz*Xx - Zx*Xz
   CM[6] = Zx*Xy - Zy*Xx
   end
   CM[10],CM[11],CM[12]=CP[1],CP[2],CP[3]
   end
   end
end
function TIC()
   local t = time()/1e3
   local p,num,r = t - tick_last,0,0
   num = flr( p / (1/60) )
   r = p - num*(1/60) --(in seconds!))
   if num > 0 then
   tick_last = t - r
   num = min(10,num)
   for i=0, num-1 do
   update()
   tick = tick + 1
   end
   end
   render()
   t = time()/1e3
   if frame-last_frame == 60 then
   fps = 60/( t - last_time )
   fps = flr( fps*100)/100
   last_time = t
   last_frame = frame
   end
   frame=frame+1 ;
end
